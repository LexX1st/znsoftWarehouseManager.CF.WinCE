using System;
using System.Linq;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Drawing;

namespace СкладскойУчет
{
    public partial class ПогрузкаМест : Form
    {
        private Пакеты Обмен;
        private string[][] ОтветСервера;
        List<string[]> КоллекцияСтрок = new List<string[]>();

        private List<СтрокаТаблицыМест> ТаблицаМест = new List<СтрокаТаблицыМест>();

        public string ТТН;
        public string НомерТТН;

        public ПогрузкаМест()
        {
            Обмен = new Пакеты("Погрузка");
            InitializeComponent();
        }

        // События на форме -------------------------------------------------------------------------------------------------------------------------------------
        public virtual void ПогрузкаМест_Load(object sender, EventArgs e)
        {
            ЗаполнитьПараметрыНаФорме();
        }

        public void ПогрузкаМест_KeyDown(object sender, KeyEventArgs e)
         {
             if (РаботаСоСканером.НажатаКлавишаСкан(e))
             {

                 string СтрокаСкан = РаботаСоСканером.Scan();
                 if (СтрокаСкан.Length == 0) return;

                 e.Handled = true;

                 bool СканМеста = СтрокаСкан.ToLower().StartsWith("mst");
                 bool ТТН_НеСосканирована = string.IsNullOrEmpty(ТТН);

                 // Скан ТТН
                 if (ТТН_НеСосканирована)
                 {
                     if (СканМеста)
                     {
                         Инфо.Ошибка("Перед сканированием мест нужно сосканировать ТТН!");
                         return;
                     }
                     ОбработатьСканТТН(СтрокаСкан);
                     return;
                 }
                 else
                 {
                     // Скан места
                     if (СканМеста)
                     {
                         ОбработатьСканМеста(СтрокаСкан);
                         return;
                     }
                     else
                     {
                         Инфо.Ошибка("Необходимо сосканировать грузовое место!");
                     }
                 }
                 return;
             }

             // Удаление мест по филиалу
             if (e.KeyCode == System.Windows.Forms.Keys.Back)
             {
                 e.Handled = true;
                 УдалениеМестПоФилиалу();
             }

             if (РаботаСоСканером.НажатаПраваяПодэкраннаяКлавиша(e) || e.KeyCode == System.Windows.Forms.Keys.Enter)
             {
                 _Далее();
             }

             if (РаботаСоСканером.НажатаЛеваяПодэкраннаяКлавиша(e) || e.KeyCode == System.Windows.Forms.Keys.Escape)
             {
                 _Назад();
             }
         }

        public void ЗаполнитьПараметрыНаФорме()
        {
            if (string.IsNullOrEmpty(НомерТТН))
            {
                НадписьТТН.Text = "Сканируйте ТТН";
                НадписьТТН.BackColor = Color.LightSalmon;
            }
            else
            {
                НадписьТТН.Text = "ТТН " + НомерТТН;
                НадписьТТН.BackColor = this.BackColor;
            }
        }

        public void УдалениеМестПоФилиалу()
        {
            var ВыбраннаяСтрока = Таблица.FocusedItem;
            if (ВыбраннаяСтрока == null) return;

            РаботаСоСканером.Звук.Ошибка();
            var MSGRes = MessageBox.Show("Отменить сканирование мест по выбранному филиалу?", "Отмена сканирования", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
            if (MSGRes != DialogResult.Yes) return;

            ОчиститьСтрокиТаблицыМестПоФилиалу(ВыбраннаяСтрока.SubItems[1].Text); // ФилиалГуид

            ВыбраннаяСтрока.SubItems[2].Text = "0";
        }

        public void Назад_Click(object sender, EventArgs e)     
        {
            _Назад(); 
        }

        public void Далее_Click(object sender, EventArgs e)
        {
            _Далее();
        }

        public virtual void _Назад()
        {
            // Если места уже сосканированы, задаем порос при выходе
            var СтрокиТаблицы = from Строка in ТаблицаМест
                                where Строка.Сосканировано == 1
                                select Строка;

            if (СтрокиТаблицы.Count() > 0)
            {
                РаботаСоСканером.Звук.Ошибка();
                var MSGRes = MessageBox.Show("Уже сосканированы места! Вы точно хотите отменить погрузку ?", "Отмена погрузки", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
                if (MSGRes != DialogResult.Yes) return;
            }

            this.Close();
        }
        // ------------------------------------------------------------------------------------------------------------------------------------------------------


        // Сканирование -----------------------------------------------------------------------------------------------------------------------------------------   
        private void ОбработатьСканТТН(string СтрокаСкан)
        {
            ОтветСервера = Обмен.ПослатьСтроку(СтрокаСкан);

            if (ОтветСервера == null)
            {
                ТТН = "";
                НомерТТН = "";
            }
            else
            {
                ЗаполнитьТаблицы(ОтветСервера);

                // Подтверждаем успешный скан звуком
                РаботаСоСканером.Звук.Ок();
            }
            ЗаполнитьПараметрыНаФорме();
        }

        private void ОбработатьСканМеста(string СтрокаСкан)
        {
            string Место = СтрокаСкан.Substring(3);
            string ФилиалГуид;

            var СтрокаТаблицыМест = НайтиСтрокуТаблицыМест(Место);
            if (СтрокаТаблицыМест != null)
            {
                if (СтрокаТаблицыМест.Сосканировано == 1)
                {
                    Инфо.Ошибка("Данное место уже сосканировано!");
                    return;
                }
                else
                {
                    СтрокаТаблицыМест.Сосканировано = 1;
                    ФилиалГуид = СтрокаТаблицыМест.ФилиалГуид;
                }
            }
            else
            {
                ОтветСервера = Обмен.ПослатьСтроку(СтрокаСкан);
                if (ОтветСервера == null) return;
                ФилиалГуид = ОтветСервера[0][0];
                СтрокаТаблицыМест = ДобавитьСтрокуТаблицыМест(Место, ФилиалГуид, 1);
            }


            // Ищем строку на экране
            ListViewItem СтрокаНаЭкране = null;
            foreach (ListViewItem Стр in Таблица.Items)
            {
                if (Стр.SubItems[1].Text == ФилиалГуид)
                {
                    СтрокаНаЭкране = Стр;
                    break;
                }
            }
            if (СтрокаНаЭкране == null)
            {
                Инфо.Ошибка("Филиал сосканированного места не найден в ТТН!");
                СтрокаТаблицыМест.Сосканировано = 0;
                return;
            }       

            // Добавляем место по соответствующему филиалу
            ОбработатьКоличествоМестПоФилиалу(ФилиалГуид, СтрокаНаЭкране);

            // Подтверждаем успешный скан звуком
            РаботаСоСканером.Звук.Ок();
        }
        // ------------------------------------------------------------------------------------------------------------------------------------------------------


        // Завершение перемещения -------------------------------------------------------------------------------------------------------------------------------
        public virtual void _Далее()
        {
            ЗавершениеПогрузки();
        }

        private void ЗавершениеПогрузки()
        {
            // Не даем завершить задания, если адрес получатель не выбран
            if (string.IsNullOrEmpty(ТТН))
            {
                Инфо.Ошибка("Не выбрана ТТН!");
                return;
            }

            // Заполняем массив для отправки в 1с
            КоллекцияСтрок.Clear();

            ДобавитьСтроку("ТТН", ТТН, "");

            foreach (var Строка in ТаблицаМест)
            {
                ДобавитьСтроку(Строка.Место, Строка.ФилиалГуид, Строка.Сосканировано.ToString());
            }

            Cursor.Current = Cursors.WaitCursor;

            ОтветСервера = Обмен.Послать("Завершить", КоллекцияСтрок.ToArray());

            Cursor.Current = Cursors.Default;

            //в случае какой либо ошибки при завершении ничего не делаем, даем возможность завершить повторно
            if (ОтветСервера == null) return;

            if (ОтветСервера[0][0] == "ЗавершеноУспешно")
            {
                РаботаСоСканером.Звук.Ок();
                this.Close();
                return;
            }
        }

        void ДобавитьСтроку(params string[] args)
        {
            КоллекцияСтрок.Add(args);
        }
        // ------------------------------------------------------------------------------------------------------------------------------------------------------


        // Работа с таблицами -----------------------------------------------------------------------------------------------------------------------------------
        private class СтрокаТаблицыМест
        {
            public string Место;
            public string ФилиалГуид;
            public int Сосканировано;
        }

        private void ЗаполнитьТаблицы(string[][] ОтветСервера)
        {
            ТаблицаМест.Clear();
            Таблица.Items.Clear();
            ТТН = "";
            НомерТТН = "";

            foreach (var Строка in ОтветСервера)
            {
                if (Строка[0] == "ТТН") { ТТН = Строка[1]; continue; }
                if (Строка[0] == "НомерТТН") { НомерТТН = Строка[1]; continue; }

                ДобавитьСтрокуВТаблицы(Строка);
            }
        }

        private void ДобавитьСтрокуВТаблицы(string[] Строка)
        {
            int КоличествоПараметров = Строка.Count();

            // Заполняем таблицу филиалов
            if (КоличествоПараметров == 3)
            {
                // Добавляем строку на экран
                ListViewItem НоваяСтрока = new ListViewItem();
                НоваяСтрока.Text = Строка[0]; // Филиал
                НоваяСтрока.SubItems.Add(Строка[1]); // ФилиалГуид
                НоваяСтрока.SubItems.Add(Строка[2]); // Количество мест

                Таблица.Items.Add(НоваяСтрока);
            }
            else // Заполняем таблицу мест
            {
                ДобавитьСтрокуТаблицыМест(Строка[0], Строка[1], 1);
            }
        }

        private СтрокаТаблицыМест ДобавитьСтрокуТаблицыМест(string Место, string ФилиалГуид, int Сосканировано)
        {
            СтрокаТаблицыМест СтрокаТаблицы = new СтрокаТаблицыМест();
            СтрокаТаблицы.Место = Место;
            СтрокаТаблицы.ФилиалГуид = ФилиалГуид;
            СтрокаТаблицы.Сосканировано = Сосканировано;
            ТаблицаМест.Add(СтрокаТаблицы);

            return СтрокаТаблицы;
        }
        
        private СтрокаТаблицыМест НайтиСтрокуТаблицыМест(string Место)
        {
            var СтрокаТаблицы = from Строка in ТаблицаМест
                                where Строка.Место == Место
                                select Строка;
            if (СтрокаТаблицы.Count() == 0) return null;
            return СтрокаТаблицы.First();
        }

        private void ОчиститьСтрокиТаблицыМестПоФилиалу(string ФилиалГуид)
        {
            var СтрокиТаблицы = from Строка in ТаблицаМест
                                where Строка.ФилиалГуид == ФилиалГуид
                                select Строка;

            foreach (СтрокаТаблицыМест Строка in СтрокиТаблицы)
            {
                Строка.Сосканировано = 0;
            }

        }

        private void ОбработатьКоличествоМестПоФилиалу(string ФилиалГуид, ListViewItem СтрокаНаЭкране)
        {
            // Определяем количество сосканированных мест
            var СтрокаТаблицы = from Строка in ТаблицаМест
                                where Строка.ФилиалГуид == ФилиалГуид && Строка.Сосканировано == 1 
                                select Строка;

            int КоличествоМест = СтрокаТаблицы.Count();

            // Заполняем количество сосканированных мест и выделяем строку с филиалом
            СтрокаНаЭкране.SubItems[2].Text = КоличествоМест.ToString();
            Таблица.EnsureVisible(СтрокаНаЭкране.Index);

            foreach (int index in Таблица.SelectedIndices)
            {
                Таблица.Items[index].Selected = false;
            }
            СтрокаНаЭкране.Selected = true;
            СтрокаНаЭкране.Focused = true;
        }
        // ------------------------------------------------------------------------------------------------------------------------------------------------------

    }
}