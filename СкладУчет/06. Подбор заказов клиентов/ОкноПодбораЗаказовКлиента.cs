using System;
using System.Windows.Forms;
using System.Drawing;
using System.Linq;
using System.Collections.Generic;

namespace СкладскойУчет
{
    public partial class ОкноПодбораЗаказовКлиента : Form
    {
        private string РН;
        private string РН_Гуид;
        private string Адрес;
        private Пакеты Обмен;

        List<string[]> КоллекцияСтрок = new List<string[]>();
        private string[][] ОтветСервера;
              
        private List<СтрокаТаблицыПодбора> ТаблицаПодбора = new List<СтрокаТаблицыПодбора>();
        private List<СтрокаТаблицыЕАН> ТаблицаЕАН = new List<СтрокаТаблицыЕАН>();
        
        DateTime ВременнойПромежуток;

        public ОкноПодбораЗаказовКлиента()
        {
            Обмен = new Пакеты("ПодборЗаказовКлиентов");
            InitializeComponent();
            ОбнулитьВремя();
        }


        // События на форме -----------------------------------------------------------------------------------------------------------------------------------
        public virtual void ОкноПодбораЗаданий_Load(object sender, EventArgs e)
        {
            ОтветСервера = Обмен.ПослатьСтроку("ПолучениеЗаданий");

            if (ОтветСервера == null) { this.Close(); return; } // в случае ошибки закрываем окно подбора

            ЗаполнитьТаблицы(ОтветСервера);

            ВывестиТаблицуПодбораНаЭкран();

            НадписьАдрес.Text = "Адрес: " + Адрес;
            НадписьРН.Text = "РН: " + РН;

            // Пытаемся выбрать первую строку
            try
            {
                var ВыбраннаяСтрока = СписокВыбора.Items[0];
                if (ВыбраннаяСтрока == null) return;
                ВыбраннаяСтрока.Selected = true;
                ВыбраннаяСтрока.Focused = true;
                ПоказатьДопИнфоТовара();
            }
            catch (Exception) { }
        }

        public virtual void ОкноПодбораЗаданий_KeyDown(object sender, KeyEventArgs e)
        {
            if (РаботаСоСканером.НажатаКлавишаСкан(e))
            {

                string СтрокаСкан = РаботаСоСканером.Scan();
                if (СтрокаСкан.Length == 0) return;

                e.Handled = true;

                ОбработатьСканТовара(СтрокаСкан);
                return;
            }

            if (e.KeyCode == System.Windows.Forms.Keys.F8 || e.KeyCode == System.Windows.Forms.Keys.Enter)
            {
                e.Handled = true;
                РучнойВводКоличества();
            }
        }

        private void РучнойВводКоличества()
        {
            var ВыбраннаяСтрока = СписокВыбора.FocusedItem;
            if (ВыбраннаяСтрока == null) return;

            var СтрокаТаблицы = НайтиСтрокуТаблицыПодбораПоГуиду(ВыбраннаяСтрока.SubItems[2].Text); // Гуид
            if (СтрокаТаблицы == null) return;

            string ТекстИнструкции = "Введите необходимое \nколичество товара \nдля подбора из \nтребуемых " + СтрокаТаблицы.КоличествоТребуется + " шт.";
            ОкноВводКоличества ОкноВводКоличества = new ОкноВводКоличества(ТекстИнструкции, СтрокаТаблицы.КоличествоСобрано, СтрокаТаблицы.КоличествоТребуется, false);
            DialogResult d = ОкноВводКоличества.ShowDialog();
            if (d == DialogResult.OK)
            {
                int Количество = ОкноВводКоличества.Количество_;
                if (Количество > СтрокаТаблицы.КоличествоТребуется) { Инфо.Ошибка("Необходимо ввести количество не более " + СтрокаТаблицы.КоличествоТребуется); return; }
                СтрокаТаблицы.КоличествоСобрано = Количество;
                СтрокаТаблицы.СекундПодбора += ВзятьВремя();
                ОбработатьКоличествоСтроки(СтрокаТаблицы);
            }
        }

        private void СписокВыбора_SelectedIndexChanged(object sender, EventArgs e)
        {
            ПоказатьДопИнфоТовара();
        }

        public virtual void ПоказатьДопИнфоТовара()
        {
            try
            {
                ДопИнфо.Text = СписокВыбора.FocusedItem.Text;
            }
            catch (Exception) { }
        }

        private void Далее_Click(object sender, EventArgs e)
        {
            ЗавершитьЗадания();
        }     
        // ------------------------------------------------------------------------------------------------------------------------------------------------------


        // Сканирование товаров ---------------------------------------------------------------------------------------------------------------------------------       
        private void ОбработатьСканТовара(string СтрокаСкан)
        {
            string Код = "";

            // Проверка на ЕАН8 и преобразование к коду по базе
            if (СтрокаСкан.Length == 8)
            {
                var ЕАН8 = ОбщиеФункции.ПроверитьЕАН8(СтрокаСкан);

                if (ЕАН8) // Если символ контрольной суммы верный, преобразуем ЕАН8 к семизначному коду по базе
                {
                    Код = СтрокаСкан.Substring(0, 7);
                }
            }

            var МассивТоваров = НайтиТоварПоЕАН(СтрокаСкан, Код);

            if (МассивТоваров.Count() == 0)
            {
                Инфо.Ошибка("Считанного товара нет в заданиях!");
                return;
            }

            string ВыбранныйТовар = null;

            if (МассивТоваров.Count() > 1)
            {
                ВыбранныйТовар = ВыборТовараИзМножества.ВыбратьТоварИзМножества(МассивТоваров);
            }
            else
            {
                ВыбранныйТовар = МассивТоваров.FirstOrDefault()[2];
            }

            if (ВыбранныйТовар == null) return;

            var СтрокаТаблицы = НайтиСтрокуТаблицыПодбораПоГуиду(ВыбранныйТовар); // Гуид
            if (СтрокаТаблицы == null) return;

            if (СтрокаТаблицы.КоличествоСобрано == СтрокаТаблицы.КоличествоТребуется) {
                Инфо.Ошибка("Необходимо ввести количество не более " + СтрокаТаблицы.КоличествоТребуется.ToString()); 
                return; 
            }

            СтрокаТаблицы.КоличествоСобрано += 1;
            СтрокаТаблицы.СекундПодбора += ВзятьВремя();
            ОбработатьКоличествоСтроки(СтрокаТаблицы);
        }

        private IEnumerable<string []> НайтиТоварПоЕАН(string ЕАН, string Код)
        {
            var СтрокиЕАН = (from Строка in ТаблицаЕАН
                             where Строка.ЕАН == ЕАН || Строка.Код == Код
                             select new { Строка.Код, Строка.Товар, Строка.Гуид }).Distinct();

            var МассивСтрок = СтрокиЕАН.Select(Строка => new string[] { Строка.Код, Строка.Товар, Строка.Гуид });

            return МассивСтрок;
        }
        // -----------------------------------------------------------------------------------------------------------------------------------------------------


        // Завершение подбора -----------------------------------------------------------------------------------------------------------------------------------
        private void ЗавершитьЗадания()
        {
            // Заполняем массив для отправки в 1с
            КоллекцияСтрок.Clear();

            foreach (var Строка in ТаблицаПодбора)
            {
                if (Строка.КоличествоСобрано > 0)
                {
                    ДобавитьСтроку(Строка.Гуид, Строка.КоличествоСобрано.ToString(), Строка.СекундПодбора.ToString());
                }
            }

            Cursor.Current = Cursors.WaitCursor;

            ОтветСервера = Обмен.Послать("ЗавершитьЗадания", КоллекцияСтрок.ToArray());

            Cursor.Current = Cursors.Default;

            if (ОтветСервера[0][0] == "ЗавершеноУспешно") 
            {
                //Form Окно = new ОкноВыбораЗаданийЗаказовКлиента();
                //this.Close();
                //Окно.Show();
                //return;
            }
       
        }

        void ДобавитьСтроку(params string[] args)
        {
            КоллекцияСтрок.Add(args);
        }
        // ------------------------------------------------------------------------------------------------------------------------------------------------------


        // Работа с таблицами -----------------------------------------------------------------------------------------------------------------------------------
        private class СтрокаТаблицыПодбора
        {
            public string Товар;
            public string Код;
            public string Гуид;
            public int КоличествоСобрано;
            public int КоличествоТребуется;
            public int КоличествоОстаток;
            public int СекундПодбора = 0;
            public ListViewItem СтрокаСписка;
        }

        private class СтрокаТаблицыЕАН
        {
            public string Товар;
            public string Код;
            public string Гуид;
            public string ЕАН;
        }

        private void ЗаполнитьТаблицы(string[][] ОтветСервера)
        {

            ТаблицаЕАН.Clear();
            ТаблицаПодбора.Clear();

            foreach (var Строка in ОтветСервера)
            {
                if (Строка[0] == "РН") { РН = Строка[1]; continue; }
                if (Строка[0] == "РН_Гуид") { РН_Гуид = Строка[1]; continue; }
                if (Строка[0] == "Адрес") { Адрес = Строка[1]; continue; }

                int КоличествоПараметров = Строка.Count();

                // Заполняем таблицу ЕАН
                if (КоличествоПараметров == 4)
                {
                    СтрокаТаблицыЕАН СтрокаТаблицы = new СтрокаТаблицыЕАН();

                    СтрокаТаблицы.Товар = Строка[0];
                    СтрокаТаблицы.Код = Строка[1];
                    СтрокаТаблицы.Гуид = Строка[2];
                    СтрокаТаблицы.ЕАН = Строка[3];

                    ТаблицаЕАН.Add(СтрокаТаблицы);
                }
                else // Заполняем таблицу подбора
                {
                    СтрокаТаблицыПодбора СтрокаТаблицы = new СтрокаТаблицыПодбора();

                    СтрокаТаблицы.Товар = Строка[0];
                    СтрокаТаблицы.Код = Строка[1];
                    СтрокаТаблицы.Гуид = Строка[2];
                    СтрокаТаблицы.КоличествоСобрано = int.Parse(Строка[3]);
                    СтрокаТаблицы.КоличествоТребуется = int.Parse(Строка[4]);
                    СтрокаТаблицы.КоличествоОстаток = int.Parse(Строка[5]);

                    ТаблицаПодбора.Add(СтрокаТаблицы);
                }
            }

        }

        private void ВывестиТаблицуПодбораНаЭкран()
        {
            СписокВыбора.Items.Clear();

            foreach (var Строка in ТаблицаПодбора)
            {
                ListViewItem НоваяСтрока = new ListViewItem();
                НоваяСтрока.Text = "(" + Строка.Код + ") " + Строка.Товар; // Товар
                НоваяСтрока.SubItems.Add(Строка.КоличествоСобрано + "/" + Строка.КоличествоТребуется + " (" + Строка.КоличествоОстаток + ")");
                НоваяСтрока.SubItems.Add(Строка.Гуид);

                СписокВыбора.Items.Add(НоваяСтрока);

                Строка.СтрокаСписка = НоваяСтрока;
            }

        }

        private СтрокаТаблицыПодбора НайтиСтрокуТаблицыПодбораПоГуиду(string Гуид)
        {
            var СтрокаТаблицы = from Строка in ТаблицаПодбора
                          where Строка.Гуид == Гуид
                          select Строка;
            if (СтрокаТаблицы.Count() == 0) return null;
            return СтрокаТаблицы.First();
        }

        private void ОбработатьКоличествоСтроки(СтрокаТаблицыПодбора Строка)
        {
            // Если товар полностью подобран, удаляем с экрана строку
            if (Строка.КоличествоСобрано == Строка.КоличествоТребуется)
            {
                СписокВыбора.Items.Remove(Строка.СтрокаСписка);
                if (СписокВыбора.Items.Count == 0)
                {
                    ЗавершитьЗадания();
                }
            }
            else
            {
                var СтрокаНаЭкране = Строка.СтрокаСписка;
                СтрокаНаЭкране.SubItems[1].Text = Строка.КоличествоСобрано + "/" + Строка.КоличествоТребуется + " (" + Строка.КоличествоОстаток + ")";
                СписокВыбора.EnsureVisible(СтрокаНаЭкране.Index);

                // Убираем текущие выделения
                try
                {
                    foreach (int index in СписокВыбора.SelectedIndices)
                    {
                        СписокВыбора.Items[index].Selected = false;
                    }
                }
                catch (Exception) { }

                // Выделяем строку
                СтрокаНаЭкране.Selected = true;

                СтрокаНаЭкране.Focused = true;
                ПоказатьДопИнфоТовара();
            }
        }
        // ------------------------------------------------------------------------------------------------------------------------------------------------------


        // Вспомогательные процедуры ---------------------------------------------------------------------------------------------------------------------------
        private void ОбнулитьВремя()
        {
            ВременнойПромежуток = DateTime.Now;
        }

        private int ВзятьВремя()
        {
            int Секунд = (DateTime.Now - ВременнойПромежуток).Seconds;
            ОбнулитьВремя();
            return Секунд;
        }
        // -----------------------------------------------------------------------------------------------------------------------------------------------------

    }
}