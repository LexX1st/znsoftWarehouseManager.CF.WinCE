using System;
using System.Linq;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace СкладскойУчет
{
    public partial class ОкноПеремещенияТоваров : Form
    {

        private Пакеты Обмен;
        private string[][] ОтветСервера;
        List<string[]> КоллекцияСтрок = new List<string[]>();

        private List<СтрокаТаблицыПеремещения> ТаблицаПеремещения = new List<СтрокаТаблицыПеремещения>();
        private List<СтрокаТаблицыЕАН> ТаблицаЕАН = new List<СтрокаТаблицыЕАН>();

        private string АдресОтправитель;
        private string АдресПолучатель;
        private bool ЭтоДинамическаяЯчейка;
        private bool МногоТоваров;
        
        public ОкноПеремещенияТоваров(string[][] ОтветСервера_)
        {
            Обмен = new Пакеты("Перемещение");
            ОтветСервера = ОтветСервера_;
            InitializeComponent();
        }

        // События на форме -----------------------------------------------------------------------------------------------------------------------------------
        private void ОкноПеремещенияТоваров_Load(object sender, EventArgs e)
        {
            ЗаполнитьТаблицы(ОтветСервера);

            ВывестиТаблицуПеремещенияНаЭкран();

            ЗаполнитьПараметрыНаФорме();

            СписокПеремещения.Focus();

            // Скрываем колонку "Адрес", при движении не с динамической ячейки
            if (!ЭтоДинамическаяЯчейка && КолонкаАдрес.Width > 0)
            {              
                КолонкаТовар.Width += КолонкаАдрес.Width;
                КолонкаАдрес.Width = 0;
            }
            if (ЭтоДинамическаяЯчейка && КолонкаАдрес.Width == 0)
            {
                КолонкаАдрес.Width = 65;
                КолонкаТовар.Width -= КолонкаАдрес.Width;
            }

            // Пытаемся выбрать первую строку
            try
            {
                var ВыбраннаяСтрока = СписокПеремещения.Items[0];
                if (ВыбраннаяСтрока == null) return;
                ВыбраннаяСтрока.Selected = true;
                ВыбраннаяСтрока.Focused = true;
            }
            catch (Exception) { }

            ПоказатьДопИнфоТовара();
        }

        private void ОкноПеремещенияТоваров_KeyDown(object sender, KeyEventArgs e)
        {

            if (РаботаСоСканером.НажатаКлавишаСкан(e))
            {

                string СтрокаСкан = РаботаСоСканером.Scan();
                if (СтрокаСкан.Length == 0) return;

                e.Handled = true;
                // Скан в поиске
                if (Таб.SelectedIndex == 1)
                {
                    Инфо.ПолучениеИнформации(СтрокаСкан, СписокИнформации, Таб);
                    return;
                }

                // Скан адреса
                if (СтрокаСкан.ToLower().StartsWith("adr") && СтрокаСкан.Length == 10)
                {
                    ОбработатьСканАдреса(СтрокаСкан);
                    return;
                }

                // Скан товара
                ОбработатьСканТовара(СтрокаСкан);
                return;
            }

            if (e.KeyCode == System.Windows.Forms.Keys.F8 || e.KeyCode == System.Windows.Forms.Keys.Enter)
            {
                e.Handled = true;
                РучнойВводКоличества();
            }

            if (РаботаСоСканером.НажатаПраваяПодэкраннаяКлавиша(e))
            {
                _Далее();
            }

            if (РаботаСоСканером.НажатаЛеваяПодэкраннаяКлавиша(e))
            {
                _Назад();
            }

            if ((e.KeyCode == System.Windows.Forms.Keys.Left))
            {
                Таб.SelectedIndex = 0;
                e.Handled = true;
            }
            if ((e.KeyCode == System.Windows.Forms.Keys.Right))
            {
                Таб.SelectedIndex = 1;
                e.Handled = true;
            }
        }

        private void РучнойВводКоличества()
        {
            var ВыбраннаяСтрока = СписокПеремещения.FocusedItem;
            if (ВыбраннаяСтрока == null) return;

            var СтрокаТаблицы = НайтиСтрокуТаблицыПеремещенияПоГуиду(ВыбраннаяСтрока.SubItems[2].Text); // Гуид
            if (СтрокаТаблицы == null) return;

            string ТекстИнструкции = "Введите необходимое \nколичество товара \nдля перемещения из \nвозможных " + СтрокаТаблицы.Остаток + " шт.";
            ОкноВводКоличества ОкноВводКоличества = new ОкноВводКоличества(ТекстИнструкции, СтрокаТаблицы.Количество, СтрокаТаблицы.Остаток, false);
            DialogResult d = ОкноВводКоличества.ShowDialog();
            if (d == DialogResult.OK)
            {
                int Количество = ОкноВводКоличества.Количество_;
                if (Количество > СтрокаТаблицы.Остаток) { Инфо.Ошибка("Необходимо ввести количество не более " + СтрокаТаблицы.Остаток); return; }
                СтрокаТаблицы.Количество = Количество;
                ОбработатьКоличествоСтроки(СтрокаТаблицы);

                // Подтверждаем успешный ввод количества звуком
                РаботаСоСканером.Звук.Ок();
            }
        }

        public void ЗаполнитьПараметрыНаФорме()
        {

            НадписьАдресОтправитель.Text = "Перемещение с: " + АдресОтправитель;

            if (string.IsNullOrEmpty(АдресПолучатель))
            {

                НадписьАдресПолучатель.Text = "Сосканируйте адрес получатель";
                НадписьАдресПолучатель.BackColor = Color.LightSalmon;
            }
            else
            {
                НадписьАдресПолучатель.Text = "Перемещение на: " + АдресПолучатель;
                НадписьАдресПолучатель.BackColor = this.BackColor;
            }

        }

        private void СписокПеремещения_SelectedIndexChanged(object sender, EventArgs e)
        {
            ПоказатьДопИнфоТовара();
        }

        public virtual void ПоказатьДопИнфоТовара()
        {
            try
            {
                ДопИнфо.Text = "(" + СписокПеремещения.FocusedItem.SubItems[1].Text + ") " + СписокПеремещения.FocusedItem.Text; // (Код) Товар
            }
            catch (Exception) { ДопИнфо.Text = ""; }
        }

        private void Назад_Click(object sender, EventArgs e)
        {
            _Назад();
        }

        private void Далее_Click(object sender, EventArgs e)
        {
            _Далее();
        }

        public virtual void _Назад()
        {
            ОтветСервера = Обмен.ПослатьСтроку("Выход");

            Form Окно = new ОкноВыбораАдреса();
            this.Close();
            Окно.Show();
            return; 
        } 
        // ------------------------------------------------------------------------------------------------------------------------------------------------------


        // Сканирование -----------------------------------------------------------------------------------------------------------------------------------------       
        private void ОбработатьСканАдреса(string СтрокаСкан)
        {
            ОтветСервера = Обмен.ПослатьСтроку(СтрокаСкан);

            if (ОтветСервера == null)
            {
                АдресПолучатель = "";
            }
            else
            {
                АдресПолучатель = ОтветСервера[0][0];

                // Подтверждаем успешный скан звуком
                РаботаСоСканером.Звук.Ок();
            }
            ЗаполнитьПараметрыНаФорме();
        } 
        
        private void ОбработатьСканТовара(string СтрокаСкан)
        {
            string Код = "";

            // Проверка на ЕАН8 и преобразование к коду по базе
            if (СтрокаСкан.Length == 8)
            {
                var ЕАН8 = ОбщиеФункции.ПроверитьЕАН8(СтрокаСкан);

                if (ЕАН8) // Если символ контрольной суммы верный, преобразуем ЕАН8 к семизначному коду по базе
                {
                    Код = СтрокаСкан.Substring(0, 7);
                }
            }

            var МассивТоваров = НайтиТоварПоЕАН(СтрокаСкан, Код);

            if (МногоТоваров && МассивТоваров.Count() == 0)
            {
                var ДанныеПолучены = ЗаполнитьТаблицыПоТовару(СтрокаСкан, Код);
                if (!ДанныеПолучены) return;

                // Подтверждаем успешное добавление звуком
                РаботаСоСканером.Звук.Ок();

                МассивТоваров = НайтиТоварПоЕАН(СтрокаСкан, Код);
            }

            if (МассивТоваров.Count() == 0)
            {
                Инфо.Ошибка("Выбранного товара нет на остатках адреса!");
                return;
            }

            string ВыбранныйТовар = null;

            if (МассивТоваров.Count() > 1)
            {
                ВыбранныйТовар = ВыборТовараИзМножества.ВыбратьТоварИзМножества(МассивТоваров);
            }
            else
            {
                ВыбранныйТовар = МассивТоваров.FirstOrDefault()[2];
            }

            if (ВыбранныйТовар == null) return;

            var СтрокаТаблицы = НайтиСтрокуТаблицыПеремещенияПоГуиду(ВыбранныйТовар); // Гуид
            if (СтрокаТаблицы == null)
            {
                Инфо.Ошибка("Выбранного товара нет на остатках адреса!");
                return;
            }

            if (СтрокаТаблицы.Количество == СтрокаТаблицы.Остаток)
            {
                Инфо.Ошибка("Необходимо ввести количество не более " + СтрокаТаблицы.Остаток);
                return;
            }

            СтрокаТаблицы.Количество += 1;
            ОбработатьКоличествоСтроки(СтрокаТаблицы);
        }

        private IEnumerable<string[]> НайтиТоварПоЕАН(string ЕАН, string Код)
        {
            var СтрокиЕАН = (from Строка in ТаблицаЕАН
                             where Строка.ЕАН == ЕАН || Строка.Код == Код
                             select new { Строка.Код, Строка.Товар, Строка.Гуид }).Distinct();

            var МассивСтрок = СтрокиЕАН.Select(Строка => new string[] { Строка.Код, Строка.Товар, Строка.Гуид });

            return МассивСтрок;
        }
        // -----------------------------------------------------------------------------------------------------------------------------------------------------


        // Завершение перемещения -------------------------------------------------------------------------------------------------------------------------------
        public virtual void _Далее()
        {
            ЗавершениеПеремещения();
        }
        
        private void ЗавершениеПеремещения()
        {
            // Не даем завершить задания, если адрес получатель не выбран
            if (string.IsNullOrEmpty(АдресПолучатель))
            {
                Инфо.Ошибка("Не выбран адрес получатель!");
                return;
            }

            // Заполняем массив для отправки в 1с
            КоллекцияСтрок.Clear();

            ДобавитьСтроку("АдресОтправитель", АдресОтправитель);
            ДобавитьСтроку("АдресПолучатель", АдресПолучатель);
            ДобавитьСтроку("ЭтоДинамическаяЯчейка", ЭтоДинамическаяЯчейка == true ? "Истина" : "Ложь");

            bool ЕстьСтрокиДляОтправки = false;

            foreach (var Строка in ТаблицаПеремещения)
            {
                if (Строка.Количество > 0)
                {
                    ЕстьСтрокиДляОтправки = true;
                    ДобавитьСтроку(Строка.Гуид, Строка.Количество.ToString());
                }
            }

            // Если строк для отправки нет, данные на сервер не отсылаем
            if (!ЕстьСтрокиДляОтправки)
            {
                Инфо.Ошибка("Не сосканированы товары для перемещения!");               
                return;
            }

            Cursor.Current = Cursors.WaitCursor;

            ОтветСервера = Обмен.Послать("ЗавершитьЗадания", КоллекцияСтрок.ToArray());

            Cursor.Current = Cursors.Default;

            //в случае какой либо ошибки при завершении ничего не делаем, даем возможность завершить повторно
            if (ОтветСервера == null) return;

            if (ОтветСервера[0][0] == "НетТоваров")
            {
                РаботаСоСканером.Звук.Ок();
                this.Close();
                return;
            }

            ОкноПеремещенияТоваров_Load(null, new EventArgs());     
        }

        void ДобавитьСтроку(params string[] args)
        {
            КоллекцияСтрок.Add(args);
        }  
        // ------------------------------------------------------------------------------------------------------------------------------------------------------


        // Работа с таблицами -----------------------------------------------------------------------------------------------------------------------------------
        private class СтрокаТаблицыПеремещения
        {
            public string Товар;
            public string Код;
            public string Гуид;
            public int Остаток;
            public int Количество;
            public string РекомемдуемыйАдрес;
            public ListViewItem СтрокаСписка;
        }

        private class СтрокаТаблицыЕАН
        {
            public string Товар;
            public string Код;
            public string Гуид;
            public string ЕАН;
        }

        private void ЗаполнитьТаблицы(string[][] ОтветСервера)
        {
            ТаблицаЕАН.Clear();
            ТаблицаПеремещения.Clear();
            АдресПолучатель = "";

            foreach (var Строка in ОтветСервера)
            {
                if (Строка[0] == "АдресОтправитель") { АдресОтправитель = Строка[1]; continue; }
                if (Строка[0] == "ЭтоДинамическаяЯчейка") { ЭтоДинамическаяЯчейка = Строка[1] == "true"; continue; }
                if (Строка[0] == "МногоТоваров") { МногоТоваров = Строка[1] == "true"; continue; }

                ДобавитьСтрокуВТаблицы(Строка);
            }
        }

        private bool ЗаполнитьТаблицыПоТовару(string СтрокаСкан, string Код)
        {
            ОтветСервера = Обмен.ПослатьСтроку("СканТовара", АдресОтправитель, СтрокаСкан, Код);

            if (ОтветСервера == null) return false;

            foreach (var Строка in ОтветСервера)
            {
                ДобавитьСтрокуВТаблицы(Строка);        
            }
            return true;
        }

        private void ДобавитьСтрокуВТаблицы(string[] Строка)
        {
            int КоличествоПараметров = Строка.Count();

            // Заполняем таблицу ЕАН
            if (КоличествоПараметров == 4)
            {
                СтрокаТаблицыЕАН СтрокаТаблицы = new СтрокаТаблицыЕАН();

                СтрокаТаблицы.Товар = Строка[0];
                СтрокаТаблицы.Код = Строка[1];
                СтрокаТаблицы.Гуид = Строка[2];
                СтрокаТаблицы.ЕАН = Строка[3];

                ТаблицаЕАН.Add(СтрокаТаблицы);
            }
            else // Заполняем таблицу перемещения
            {
                СтрокаТаблицыПеремещения СтрокаТаблицы = new СтрокаТаблицыПеремещения();

                СтрокаТаблицы.Товар = Строка[0];
                СтрокаТаблицы.Код = Строка[1];
                СтрокаТаблицы.Гуид = Строка[2];
                СтрокаТаблицы.Остаток = int.Parse(Строка[3]);
                СтрокаТаблицы.Количество = 0;
                СтрокаТаблицы.РекомемдуемыйАдрес = Строка[4];

                ТаблицаПеремещения.Add(СтрокаТаблицы);
            }
        }

        private void ВывестиТаблицуПеремещенияНаЭкран()
        {
            СписокПеремещения.Items.Clear();

            if (МногоТоваров) return;
      
            foreach (var Строка in ТаблицаПеремещения)
            {
                ДобавитьСтрокуНаЭкран(Строка);
            }

        }

        private void ДобавитьСтрокуНаЭкран(СтрокаТаблицыПеремещения Строка)
        {
            ListViewItem НоваяСтрока = new ListViewItem();
            НоваяСтрока.Text = Строка.Товар;
            НоваяСтрока.SubItems.Add(Строка.Код);
            НоваяСтрока.SubItems.Add(Строка.Гуид);
            НоваяСтрока.SubItems.Add(Строка.Количество + " / " + Строка.Остаток);
            НоваяСтрока.SubItems.Add(Строка.РекомемдуемыйАдрес);

            СписокПеремещения.Items.Add(НоваяСтрока);

            Строка.СтрокаСписка = НоваяСтрока;
        }

        private СтрокаТаблицыПеремещения НайтиСтрокуТаблицыПеремещенияПоГуиду(string Гуид)
        {
            var СтрокаТаблицы = from Строка in ТаблицаПеремещения
                                where Строка.Гуид == Гуид
                                select Строка;
            if (СтрокаТаблицы.Count() == 0) return null;
            return СтрокаТаблицы.First();
        }

        private void ОбработатьКоличествоСтроки(СтрокаТаблицыПеремещения Строка)
        {        
            // Если строки на экране нет, добавляем ее
            if (Строка.СтрокаСписка == null)
            {
                ДобавитьСтрокуНаЭкран(Строка);
            }

            var СтрокаНаЭкране = Строка.СтрокаСписка;

            СтрокаНаЭкране.SubItems[3].Text = Строка.Количество + "/" + Строка.Остаток;
            СписокПеремещения.EnsureVisible(СтрокаНаЭкране.Index);

            foreach (int index in СписокПеремещения.SelectedIndices)
            {
                СписокПеремещения.Items[index].Selected = false;
            }
            СтрокаНаЭкране.Selected = true;

            СтрокаНаЭкране.Focused = true;
            ПоказатьДопИнфоТовара();
        }
        // ------------------------------------------------------------------------------------------------------------------------------------------------------
    }
}